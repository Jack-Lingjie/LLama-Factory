import json
from concurrent.futures import ThreadPoolExecutor, as_completed  
import os
import pandas as pd
from gpt4o import Openai, API_INFOS
from datasets import load_dataset, Dataset
from tqdm import tqdm

# system_template = \
# """You are tasked with acting as a text rewriter to enhance the aesthetic quality of text generated by a Large Language Model (LLM). The goal is to ensure that the text, when rendered in Markdown, is visually appealing, easy to read, and easy to understand. Modifications should be reasonable and appropriate, rather than mandatory. Each element should be used judiciously to enhance readability and comprehension. Follow these steps to ensure a clear and structured approach:  
  
# 1. Understand the Instruction: First, read and understand the user instruction provided. This will help you grasp the context and purpose of the text.  
  
# 2. Analyze the LLM-generated Response: Carefully review the text generated by the LLM. Evaluate its structure, formatting, and overall readability.  
  
# 3. Determine the Need for Modification: Decide whether the text needs modification to improve its aesthetic quality. Ask yourself if the text is clear, well-organized, and easy to read. If the text is already satisfactory, no changes are necessary.  
  
# 4. Identify Areas for Improvement: If modification is needed, identify specific areas where improvements can be made. Consider elements like paragraph structure, headings, lists, and formatting.  
  
# 5. Revise the Text: Make appropriate modifications to enhance the text's visual appeal and readability. Apply changes judiciously and ensure they are reasonable and appropriate. Ensure that the revised text maintains a consistent style and format throughout.
# """

# system_template = \
# """You are tasked with acting as a text rewriter to enhance the aesthetic quality of text generated by a Large Language Model (LLM). The goal is to ensure that the text, when rendered in Markdown, is visually appealing, easy to read, and easy to understand. Modifications should be reasonable and appropriate, rather than mandatory. Each element should be used judiciously to enhance readability and comprehension."""

# user_template = \
# """<|User Prompt|>
# {instruction}  
  
# <|The Start of Assistant's Answer|>  
# {completion}  
# <|The End of Assistant's Answer|>

# Your task is to:  
  
# 1. Analyze the LLM-generated response from a textual aesthetic perspective. First, read and understand the text to grasp its context and purpose.  
# 2. Determine whether the text needs modification. Evaluate the text's structure, formatting, and readability. Decide if changes are necessary to improve its aesthetic quality.  
# 3. Provide a revised version of the text if necessary. Make reasonable and appropriate modifications to enhance the visual appeal and readability of the text.  
  
# Format
  
# Textual Aesthetic Analysis:    
# [Your analysis]  
  
# Does it need modification: 
# If it needs modification: [[Y]]    
# If it doesn't need modification: [[N]]  
  
# Revised Text:
# If it needs modification: [Your revised text]    
# If it doesn't need modification: [""]  
  
# Textual Aesthetic Elements to Consider:  
  
# 1. Paragraph Structure: Ensure paragraphs are of appropriate length and logically structured. Use appropriate spacing between paragraphs to avoid dense text, if necessary.  
# 2. Indentation: Apply consistent indentation where necessary.  
# 3. Headings and Subheadings: Use Markdown headings (`#`, `##`, `###`, etc.) to organize content and improve readability, if applicable.  
# 4. Lists and Bullet Points: Utilize lists (ordered and unordered) to break down complex information when needed.  
#     - For unordered lists, use `-`, `*`, or `+`.  
#     - For ordered lists, use `1.`, `2.`, `3.`, etc.  
# 5. Markdown Formatting: Apply Markdown for bold (`**bold**`), italic (`*italic*`), and code blocks (`` `code` `` or triple backticks for code blocks) to highlight important information or distinguish between different types of text, if necessary.  
# 6. Line Spacing: Adjust line spacing to enhance readability. Use empty lines to separate sections when needed.  
# 7. Consistency: Maintain a consistent style throughout the document as appropriate.  
# 8. Visual Breaks: Use visual breaks (`---` or `***`) to separate different sections and improve flow, if applicable.  
# 9. Emphasis and Bold: Use bold (`**bold**`) and italic (`*italic*`) text to emphasize important points when necessary.  
# 10. Blockquotes: Use blockquotes (`>`) for quotations or highlighted text if needed.  
# 11. Links: Format hyperlinks using `[text](URL)` when applicable.  
# 12. Tables: Use Markdown tables for any tabular data if required.  
# 13. Task Lists: For task lists, use `- [ ]` for incomplete tasks and `- [x]` for completed tasks if applicable.  
# 14. Footnotes: Use footnotes (`[^1]`) and provide the footnote content at the end of the document if necessary.  
# 15. Code and Inline Code: Use code blocks for larger code sections and inline code for shorter segments when needed.  
# 16. Whitespace and Spacing: Ensure appropriate use of whitespace and spacing to avoid a cluttered appearance, if necessary.  
  
# These elements will ensure that the revised text is aesthetically pleasing, easy to read, and well-structured when rendered in Markdown.  
# """
system_template = \
"""You are tasked with acting as a text rewriter to enhance the readability and comprehension of text generated by a Large Language Model (LLM). Your goal is to ensure the text is easy to read, easy to understand, and visually organized in a logical manner. Modifications should be reasonable and appropriate, rather than mandatory. Each element should be used judiciously to enhance readability and comprehension."""

user_template = \
""" 
<|User Prompt|>{instruction}  
   
<|The Start of Assistant's Answer|>    
{completion}    
<|The End of Assistant's Answer|>  
   
Your task is to:  
1. **Analyze the LLM-generated response**:  
    - Read and understand the text to grasp its context and purpose.  
    - Carefully review the text generated by the LLM.  
    - Evaluate its structure, formatting, and overall readability.  
  
2. **Determine the Need for Modification**:  
    - Decide whether the text needs modification to improve its readability and comprehension.  
    - Ask yourself if the text is clear, well-organized, and easy to read.  
    - If the text is already satisfactory, no changes are necessary.  
  
3. **Provide a Revised Version of the Text if Necessary**:  
    - Make appropriate modifications to enhance the text's readability and comprehension.  
    - Apply changes judiciously and ensure they are reasonable and appropriate.  
    - Ensure that the revised text maintains a consistent style and format throughout.   
   
**Textual Aesthetic Elements to Consider**:  
1. **Paragraph Structure**: Ensure paragraphs are of appropriate length and logically structured. Use appropriate spacing between paragraphs to avoid dense text if necessary.  
2. **Indentation**: Apply consistent indentation where necessary.  
3. **Headings and Subheadings**: Use headings to organize content and improve readability, if applicable.  
4. **Lists and Bullet Points**: Utilize lists to break down complex information when needed.  
5. **Formatting for Emphasis**: Use bold or italic text to emphasize important points when necessary.  
6. **Line Spacing**: Adjust line spacing to enhance readability. Use empty lines to separate sections when needed.  
7. **Consistency**: Maintain a consistent style throughout the document as appropriate.  
8. **Visual Breaks**: Use visual breaks to separate different sections and improve flow, if applicable.  
9. **Blockquotes**: Use blockquotes for quotations or highlighted text if needed.  
10. **Links**: Format hyperlinks appropriately when applicable.  
11. **Tables**: Use tables for any tabular data if required.  
12. **Whitespace and Spacing**: Ensure appropriate use of whitespace and spacing to avoid a cluttered appearance, if necessary.   
   
**Format**    
**Textual Aesthetic Analysis**:  
- Your analysis  
   
**Does it need modification**:  
- If it needs modification: [[Y]]  
- If it doesn't need modification: [[N]]  
   
**Revised Text**:  
- If it needs modification: <|Revised Content Start|>Your revised text<|Revised Content End|> 
- If it doesn't need modification: <|Revised Content Start|>""<|Revised Content End|>  
   
**Example Output**:  
  
**Textual Aesthetic Analysis**:  
The text is generally clear, but it lacks emphasis on key points and could benefit from better structure. Adding bold text for emphasis and using bullet points to break down information will enhance readability.  
  
**Does it need modification**:  
[[Y]]  
  
**Revised Text**:  
<|Revised Content Start|> 
The proposed project offers several key benefits:  
- **Increased Efficiency**: Implementing the new system will significantly reduce processing time.  
- **Cost Savings**: The project is expected to lower operational costs by 15%.  
- **Improved Accuracy**: Enhanced data validation processes will minimize errors.  
- **User Satisfaction**: User-friendly interfaces will improve overall satisfaction and usability.  
  
**Next Steps**  
To move forward, the following steps should be taken:  
1. **Approval**: Obtain necessary approvals from stakeholders.  
2. **Resources**: Allocate resources and assign team members.  
3. **Timeline**: Establish a detailed project timeline with milestones.  
4. **Implementation**: Begin the implementation phase with regular progress reviews.  
<|Revised Content End|>   
"""

def get_data():
    ds = load_dataset("HuggingFaceH4/ultrafeedback_binarized", split="train_prefs")
    def get_instruct_response(item):
        # item["instruction"] = item['chosen'][0]["content"]
        item["response"] = item['chosen'][1]["content"]
        return item
    ds = ds.map(get_instruct_response, batch_size=1024, num_proc=8)
    export_data = ds.select_columns(["prompt", "response"])
    return export_data

def get_revised_text(client, instruction, completion, user_template, system_template, max_tokens=2048):  
    # Format the user template with the given instruction and completion  
    content = user_template.format(instruction=instruction, completion=completion)  
    # Get the response from the client  
    gpt_answer = client.get_response(content=content, system=system_template, max_tokens=max_tokens) 
    if gpt_answer is None:
        gpt_answer = "" 
    gpt_answer = gpt_answer.strip()  
  
    # Determine if modification is needed  
    need_modification = "Y" if "If need modification: [[Y]]" in gpt_answer else "N"  
      
    # Extract the revised text if modification is needed  
    if need_modification == "Y":  
        revised_text_start = gpt_answer.find("If need modification: [") + len("If need modification: [")  
        revised_text_end = gpt_answer.find("]", revised_text_start)  
        revised_text = gpt_answer[revised_text_start:revised_text_end].strip()  
    else:  
        revised_text = ""  
  
    return need_modification, revised_text, gpt_answer  
 
def process_row(index, client, row, user_template, system_template, max_tokens=2048, output_file="output.jsonl"):  
    prompt = row['prompt']  
    response = row['response']  
    need_modification, revised_text, gpt_answer = get_revised_text(client, prompt, response, user_template, system_template, max_tokens=max_tokens)  
    # print(f"index {index}")
    result = {  
        'index': index,  
        'prompt': prompt,  
        'response': response,  
        'does_it_need_modification': need_modification,  
        'revised_text': revised_text,  
        'gpt_answer': gpt_answer  
    }  
    # Write the result to a JSONL file  
    with open(output_file, 'a') as f:  
        f.write(json.dumps(result) + "\n")  
    return result  
def main():  
    # Initialize multiple clients  
    clients = [Openai(apis=[API_INFOS[i]]) for i in range(6)]  
    export_data = get_data()
    sample_data = export_data.select(range(100))
    # user_template = "User: {instruction}\nCompletion: {completion}"  
    # system_template = "You are a helpful assistant."  
    max_tokens = 2048  
    cur_dir = os.path.dirname(os.path.abspath(__file__))
    # data_path = os.path.join(cur_dir, "revised_data/output_sorted.jsonl")
    output_file = "revised_data/output.jsonl"  
    output_file = os.path.join(cur_dir, output_file)
  
    # Clear the output file before starting  
    if os.path.exists(output_file):  
        os.remove(output_file)  
  
    revised_data = []  
  
    with ThreadPoolExecutor(max_workers=6) as executor:  
        # Create a future for each row in the dataset  
        futures = [executor.submit(process_row, i, clients[i % len(clients)], row, user_template, system_template, max_tokens, output_file) for i, row in enumerate(sample_data)]  
  
        # Collect the results as they complete  
        for future in tqdm(as_completed(futures), total=len(futures)):  
            revised_data.append(future.result())  
        # with tqdm(total=len(futures)) as pbar:  
        #     # Collect the results as they complete  
        #     for future in as_completed(futures):  
        #         result = future.result()  
        #         revised_data.append(result)  
        #         pbar.update(1)  # Update the progress bar
  
    # Load results from JSONL file and ensure the order is preserved  
    with open(output_file, 'r') as f:  
        revised_data = [json.loads(line) for line in f]  
  
    # Sort by the original index  
    revised_dataset = revised_data.sort(key=lambda x: x['index'])  
  
    # Create a new Dataset  
    revised_dataset = Dataset.from_pandas(pd.DataFrame(revised_data))  
    revised_dataset.to_json("data_process/revised_data/output_sorted.jsonl") 
if __name__ == "__main__":
    main()
    from generate_res import generate_res
    generate_res()